/**
 * Enhanced data service for Centsi app
 * Provides a flexible interface for managing financial data
 * Works with both mock data and real user-provided data
 */

import { mockProfiles } from './mockDataService';

// Keys for localStorage
const STORAGE_KEYS = {
  USER_PROFILE: 'centsi_user_profile',
  USERNAME: 'centsi_username',
  AUTH: 'centsi_auth',
  QUESTIONNAIRE: 'centsi_questionnaire_responses',
  FINANCIAL_DATA: 'centsi_financial_data',
  ACHIEVEMENTS: 'centsi_achievements'
};

/**
 * Get complete user profile data including questionnaire responses and financial data
 */
export const getCompleteUserData = () => {
  const userProfile = getUserProfile();
  const questionnaireResponses = getQuestionnaireResponses();
  const financialData = getFinancialData();
  
  return {
    profile: userProfile,
    questionnaire: questionnaireResponses,
    finances: financialData
  };
};

/**
 * Get user profile from localStorage or return default
 */
export const getUserProfile = () => {
  const storedProfile = localStorage.getItem(STORAGE_KEYS.USER_PROFILE);
  if (storedProfile) {
    return JSON.parse(storedProfile);
  }
  
  // Check if questionnaire exists to determine which mock profile to use
  const questionnaireResponses = getQuestionnaireResponses();
  if (questionnaireResponses && questionnaireResponses.lifeStage) {
    return mockProfiles[questionnaireResponses.lifeStage] || mockProfiles.college;
  }
  
  return mockProfiles.college; // Default to college student profile
};

/**
 * Get questionnaire responses from localStorage
 */
export const getQuestionnaireResponses = () => {
  const storedQuestionnaire = localStorage.getItem(STORAGE_KEYS.QUESTIONNAIRE);
  return storedQuestionnaire ? JSON.parse(storedQuestionnaire) : null;
};

/**
 * Get username from localStorage
 */
export const getUsername = () => {
  return localStorage.getItem(STORAGE_KEYS.USERNAME) || 'User';
};

/**
 * Get financial data from localStorage or generate from user profile
 */
export const getFinancialData = () => {
  const storedFinancialData = localStorage.getItem(STORAGE_KEYS.FINANCIAL_DATA);
  if (storedFinancialData) {
    return JSON.parse(storedFinancialData);
  }
  
  // If no stored data exists, generate from user profile
  const userProfile = getUserProfile();
  
  // Extract relevant data from user profile without including any default savings goals
  const financialData = {
    income: userProfile.income || { amount: 0, frequency: 'monthly', source: 'Unspecified' },
    expenses: userProfile.expenses || [],
    savingsGoals: [], // Start with empty savings goals - users will add their own
    totalBalance: calculateBalance(userProfile)
  };
  
  return financialData;
};

/**
 * Calculate balance from income and expenses
 */
const calculateBalance = (profile) => {
  let incomeAmount = profile.income ? profile.income.amount : 0;
  const frequency = profile.income ? profile.income.frequency : 'monthly';
  
  // Convert to monthly equivalent
  if (frequency === 'weekly') {
    incomeAmount = incomeAmount * 4;
  } else if (frequency === 'bi-weekly') {
    incomeAmount = incomeAmount * 2;
  } else if (frequency === 'annually') {
    incomeAmount = incomeAmount / 12;
  }
  
  const expenses = profile.expenses || [];
  const totalExpenses = expenses.reduce((sum, expense) => sum + expense.amount, 0);
  
  return incomeAmount - totalExpenses;
};

/**
 * Save complete financial data
 */
export const saveFinancialData = (data) => {
  localStorage.setItem(STORAGE_KEYS.FINANCIAL_DATA, JSON.stringify(data));
  return data;
};

/**
 * Add a new income source
 */
export const addIncome = (incomeData) => {
  const financialData = getFinancialData();
  
  // Replace the income if it's a single object, or add to array if we support multiple income sources
  financialData.income = incomeData;
  financialData.totalBalance = calculateBalance({
    income: incomeData,
    expenses: financialData.expenses
  });
  
  // Check for budget creator achievement
  let newlyCompleted = null;
  if (incomeData && incomeData.amount > 0) {
    const result = updateAchievementProgress('budget_creator', { hasIncome: true });
    newlyCompleted = result.newlyCompleted;
  }
  
  return {
    financialData: saveFinancialData(financialData),
    newlyCompleted
  };
};

/**
 * Add a new expense
 */
export const addExpense = (expenseData) => {
  const financialData = getFinancialData();
  
  // Add to expenses array
  financialData.expenses.push(expenseData);
  financialData.totalBalance = calculateBalance({
    income: financialData.income,
    expenses: financialData.expenses
  });
  
  // Check for expense tracker achievement
  const result = updateAchievementProgress('expense_tracker', { hasExpense: true });
  
  return {
    financialData: saveFinancialData(financialData),
    newlyCompleted: result.newlyCompleted
  };
};

/**
 * Update an expense
 */
export const updateExpense = (index, expenseData) => {
  const financialData = getFinancialData();
  
  // Update expense at index
  if (index >= 0 && index < financialData.expenses.length) {
    financialData.expenses[index] = expenseData;
    financialData.totalBalance = calculateBalance({
      income: financialData.income,
      expenses: financialData.expenses
    });
  }
  
  return saveFinancialData(financialData);
};

/**
 * Remove an expense
 */
export const removeExpense = (index) => {
  const financialData = getFinancialData();
  
  // Remove expense at index
  if (index >= 0 && index < financialData.expenses.length) {
    financialData.expenses.splice(index, 1);
    financialData.totalBalance = calculateBalance({
      income: financialData.income,
      expenses: financialData.expenses
    });
  }
  
  return saveFinancialData(financialData);
};

/**
 * Add a new savings goal
 */
export const addSavingsGoal = (goalData) => {
  const financialData = getFinancialData();
  
  // Initialize savingsGoals array if it doesn't exist
  if (!financialData.savingsGoals) {
    financialData.savingsGoals = [];
  }
  
  // Add to savings goals array
  financialData.savingsGoals.push(goalData);
  
  // Check for multiple savings goals achievement
  const result = updateAchievementProgress('savings_goals_creator', { newSavingsGoal: true });
  
  // Check savings milestone achievement
  const totalSaved = financialData.savingsGoals.reduce((sum, goal) => sum + goal.current, 0);
  const savingsResult = updateAchievementProgress('savings_milestone', { savingsAmount: totalSaved });
  
  // Return the newly completed achievement if any (prioritizing the first one that completed)
  const newlyCompleted = result.newlyCompleted || savingsResult.newlyCompleted;
  
  return {
    financialData: saveFinancialData(financialData),
    newlyCompleted
  };
};

/**
 * Update a savings goal
 */
export const updateSavingsGoal = (index, goalData) => {
  const financialData = getFinancialData();
  
  // Initialize savingsGoals array if it doesn't exist
  if (!financialData.savingsGoals) {
    financialData.savingsGoals = [];
  }
  
  // Update goal at index
  if (index >= 0 && index < financialData.savingsGoals.length) {
    financialData.savingsGoals[index] = goalData;
    
    // Check for savings milestone achievement
    const totalSaved = financialData.savingsGoals.reduce((sum, goal) => sum + goal.current, 0);
    const savingsResult = updateAchievementProgress('savings_milestone', { savingsAmount: totalSaved });
    
    // If newly completed, return it along with the updated data
    if (savingsResult.newlyCompleted) {
      return {
        financialData: saveFinancialData(financialData),
        newlyCompleted: savingsResult.newlyCompleted
      };
    }
  }
  
  return {
    financialData: saveFinancialData(financialData),
    newlyCompleted: null
  };
};

/**
 * Delete a savings goal
 */
export const removeSavingsGoal = (index) => {
  const financialData = getFinancialData();
  
  // Initialize savingsGoals array if it doesn't exist
  if (!financialData.savingsGoals) {
    financialData.savingsGoals = [];
    return financialData;
  }
  
  // Remove goal at index
  if (index >= 0 && index < financialData.savingsGoals.length) {
    financialData.savingsGoals.splice(index, 1);
  }
  
  return saveFinancialData(financialData);
};

/**
 * Generate a financial report
 */
export const generateFinancialReport = () => {
  const financialData = getFinancialData();
  const username = getUsername();
  const questionnaireResponses = getQuestionnaireResponses();
  
  // Calculate useful metrics
  const totalExpenses = financialData.expenses.reduce((sum, expense) => sum + expense.amount, 0);
  const income = financialData.income.amount;
  let incomeMonthly = income;
  
  // Convert income to monthly
  if (financialData.income.frequency === 'weekly') {
    incomeMonthly = income * 4;
  } else if (financialData.income.frequency === 'bi-weekly') {
    incomeMonthly = income * 2;
  } else if (financialData.income.frequency === 'annually') {
    incomeMonthly = income / 12;
  }
  
  const savingsRate = ((incomeMonthly - totalExpenses) / incomeMonthly) * 100;
  const expenseBreakdown = {};
  
  // Group expenses by category
  financialData.expenses.forEach(expense => {
    if (!expenseBreakdown[expense.category]) {
      expenseBreakdown[expense.category] = 0;
    }
    expenseBreakdown[expense.category] += expense.amount;
  });
  
  // Find top expense categories
  const topExpenseCategories = Object.entries(expenseBreakdown)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 3);
  
  // Find savings goals progress
  const savingsGoals = financialData.savingsGoals || [];
  const savingsGoalsProgress = savingsGoals.map(goal => ({
    name: goal.name,
    target: goal.target,
    current: goal.current,
    progress: goal.current / goal.target * 100
  }));
  
  return {
    username,
    lifeStage: questionnaireResponses?.lifeStage || 'Unknown',
    incomeMonthly,
    totalExpenses,
    balance: financialData.totalBalance,
    savingsRate,
    expenseBreakdown,
    topExpenseCategories,
    savingsGoalsProgress,
    reportDate: new Date().toISOString()
  };
};

/**
 * Check if user is authenticated
 */
export const isAuthenticated = () => {
  return localStorage.getItem(STORAGE_KEYS.AUTH) === 'true';
};

/**
 * Define the structure of demo achievements
 */
export const DEMO_ACHIEVEMENTS = [
  {
    id: 'savings_goals_creator',
    name: 'Goal Setter',
    description: 'Add 3 savings goals',
    icon: '🎯',
    color: 'from-green-500 to-emerald-700',
    status: 'not-started',
    progress: 0,
    criteria: 'multipleSavingsGoals',
    xpReward: 100,
    requiredGoals: 3,
    currentGoals: 0
  },
  {
    id: 'financial_learner',
    name: 'Financial Scholar',
    description: 'Complete one learning activity',
    icon: '�',
    color: 'from-blue-500 to-indigo-700',
    status: 'not-started',
    progress: 0,
    criteria: 'completedLearning',
    xpReward: 100
  },
  {
    id: 'voice_assistant_user',
    name: 'Voice Explorer',
    description: 'Interact with the AI voice assistant',
    icon: '�️',
    color: 'from-purple-500 to-violet-700',
    status: 'not-started',
    progress: 0,
    criteria: 'usedVoiceAssistant',
    xpReward: 100
  },
  {
    id: 'savings_milestone',
    name: 'First $100 Saved',
    description: 'Save your first $100',
    icon: '💰',
    color: 'from-amber-500 to-orange-700',
    status: 'not-started',
    progress: 0,
    criteria: 'savingsAmount',
    targetAmount: 100,
    currentAmount: 0,
    xpReward: 100
  }
];

/**
 * Get achievements from localStorage or initialize with defaults
 */
export const getAchievements = () => {
  const storedAchievements = localStorage.getItem(STORAGE_KEYS.ACHIEVEMENTS);
  if (storedAchievements) {
    return JSON.parse(storedAchievements);
  }
  
  // Initialize with default achievements
  return DEMO_ACHIEVEMENTS;
};

/**
 * Save achievements to localStorage
 */
export const saveAchievements = (achievements) => {
  localStorage.setItem(STORAGE_KEYS.ACHIEVEMENTS, JSON.stringify(achievements));
  return achievements;
};

/**
 * Update achievement progress based on user actions
 * @param {string} achievementId - The ID of the achievement to update
 * @param {Object} progressData - Data needed to update the achievement
 * @returns {Object} - The updated achievement if newly completed, or null otherwise
 */
export const updateAchievementProgress = (achievementId, progressData = {}) => {
  const achievements = getAchievements();
  const achievementIndex = achievements.findIndex(a => a.id === achievementId);
  
  if (achievementIndex === -1) return { achievements, newlyCompleted: null };
  
  const achievement = achievements[achievementIndex];
  const previousStatus = achievement.status;
  let newlyCompleted = null;
  
  // Update achievement based on its criteria
  switch (achievement.criteria) {
    case 'multipleSavingsGoals':
      if (progressData.newSavingsGoal) {
        // Increment count of savings goals
        achievement.currentGoals = achievement.currentGoals ? achievement.currentGoals + 1 : 1;
        
        // Calculate progress percentage
        achievement.progress = Math.min(
          Math.round((achievement.currentGoals / achievement.requiredGoals) * 100),
          100
        );
        
        if (achievement.currentGoals >= achievement.requiredGoals) {
          achievement.status = 'completed';
          achievement.progress = 100;
        } else if (achievement.progress > 0) {
          achievement.status = 'in-progress';
        }
      }
      break;
    
    case 'completedLearning':
      if (progressData.completedLearning) {
        achievement.status = 'completed';
        achievement.progress = 100;
      }
      break;
    
    case 'usedVoiceAssistant':
      if (progressData.usedVoiceAssistant) {
        achievement.status = 'completed';
        achievement.progress = 100;
      }
      break;
    
    case 'savingsAmount':
      if (progressData.savingsAmount !== undefined) {
        // Update current amount saved
        achievement.currentAmount = progressData.savingsAmount;
        
        // Calculate progress percentage
        achievement.progress = Math.min(
          Math.round((achievement.currentAmount / achievement.targetAmount) * 100),
          100
        );
        
        if (achievement.currentAmount >= achievement.targetAmount) {
          achievement.status = 'completed';
          achievement.progress = 100;
        } else if (achievement.progress > 0) {
          achievement.status = 'in-progress';
        }
      }
      break;
    
    // Keep previous criteria for backward compatibility
    case 'hasIncome':
      if (progressData.hasIncome) {
        achievement.status = 'completed';
        achievement.progress = 100;
      }
      break;
    
    case 'hasExpense':
      if (progressData.hasExpense) {
        achievement.status = 'completed';
        achievement.progress = 100;
      }
      break;
    
    case 'hasSavingsGoal':
      if (progressData.hasSavingsGoal) {
        achievement.status = 'completed';
        achievement.progress = 100;
      }
      break;
    
    case 'exploredSections':
      if (progressData.section && !achievement.sectionsExplored.includes(progressData.section)) {
        achievement.sectionsExplored.push(progressData.section);
        
        // Calculate progress percentage
        const exploreProgress = (achievement.sectionsExplored.length / achievement.sectionsToExplore.length) * 100;
        achievement.progress = Math.round(exploreProgress);
        
        if (achievement.progress >= 100) {
          achievement.status = 'completed';
          achievement.progress = 100;
        } else if (achievement.progress > 0) {
          achievement.status = 'in-progress';
        }
      }
      break;
    
    default:
      break;
  }
  
  achievements[achievementIndex] = achievement;
  
  // Check if the achievement was newly completed
  if (previousStatus !== 'completed' && achievement.status === 'completed') {
    newlyCompleted = achievement;
  }
  
  saveAchievements(achievements);
  return { achievements, newlyCompleted };
};

/**
 * Check and update achievements based on current financial data
 * @returns {Object} - Object containing achievements and array of newly completed achievements
 */
export const checkAchievementsProgress = () => {
  const financialData = getFinancialData();
  const newlyCompletedAchievements = [];
  
  // Check for Multiple Savings Goals achievement
  if (financialData.savingsGoals) {
    // Get the current number of savings goals
    const savingsGoalsCount = financialData.savingsGoals.length;
    
    // Update the achievement with the current count
    // This will set the correct progress even if the goals were added in a previous session
    if (savingsGoalsCount > 0) {
      const result = updateAchievementProgress('savings_goals_creator', { 
        newSavingsGoal: true,
        currentGoals: savingsGoalsCount 
      });
      if (result.newlyCompleted) newlyCompletedAchievements.push(result.newlyCompleted);
    }
  }
  
  // Check for Savings Milestone achievement
  if (financialData.savingsGoals) {
    // Calculate total amount saved across all goals
    const totalSaved = financialData.savingsGoals.reduce((sum, goal) => sum + goal.current, 0);
    
    if (totalSaved > 0) {
      const result = updateAchievementProgress('savings_milestone', { savingsAmount: totalSaved });
      if (result.newlyCompleted) newlyCompletedAchievements.push(result.newlyCompleted);
    }
  }
  
  return {
    achievements: getAchievements(),
    newlyCompletedAchievements
  };
};

/**
 * Record that a user has explored a section
 * @returns {Object|null} - The achievement if newly completed, null otherwise
 */
export const recordSectionExplored = (sectionName) => {
  const result = updateAchievementProgress('financial_explorer', { section: sectionName });
  return result.newlyCompleted;
};

/**
 * Record that a user has interacted with the voice assistant
 * @returns {Object|null} - The achievement if newly completed, null otherwise
 */
export const recordVoiceAssistantUsage = () => {
  const result = updateAchievementProgress('voice_assistant_user', { usedVoiceAssistant: true });
  return result.newlyCompleted;
};

/**
 * Record that a user has completed a learning activity
 * @returns {Object|null} - The achievement if newly completed, null otherwise
 */
export const recordLearningCompleted = () => {
  const result = updateAchievementProgress('financial_learner', { completedLearning: true });
  return result.newlyCompleted;
};

// Note: We're not redefining addSavingsGoal, instead we'll update the original one